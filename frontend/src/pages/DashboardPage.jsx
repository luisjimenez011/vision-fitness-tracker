import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { useNavigate } from 'react-router-dom';
import apiClient from '../api/apiClient.js';
// Cambiamos el nombre para poder usarlo para varios gr├Аficos
import ProgressChart from '../components/ProgressChart.jsx'; 
import TrainingCalendar from '../components/TrainingCalendar.jsx'; 


// Funci├│n para transformar los datos del backend al formato de Recharts
// Ahora acepta un par├Аmetro 'metric' para saber qu├Е valor tomar (totalVolume o averageWeight)
const transformChartData = (data, metric) => {
┬а ┬а const transformedData = {};
┬а ┬а const exercises = new Set();
┬а ┬а 
┬а ┬а data.forEach(item => {
┬а ┬а ┬а ┬а const { monthYear, exerciseName } = item;
┬а ┬а ┬а ┬а const value = item[metric]; // Usamos la m├Еtrica elegida
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а if (!transformedData[monthYear]) {
┬а ┬а ┬а ┬а ┬а ┬а transformedData[monthYear] = { monthYear }; 
┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а transformedData[monthYear][exerciseName] = value; 
┬а ┬а ┬а ┬а exercises.add(exerciseName);
┬а ┬а });
┬а ┬а 
┬а ┬а return { 
┬а ┬а ┬а ┬а chartData: Object.values(transformedData).sort((a, b) => a.monthYear.localeCompare(b.monthYear)),
┬а ┬а ┬а ┬а exerciseNames: Array.from(exercises)
┬а ┬а };
};


function DashboardPage() {
┬а ┬а const auth = useAuth();
┬а ┬а const navigate = useNavigate();
┬а ┬а 
┬а ┬а // Estados existentes para historial
┬а ┬а const [logs, setLogs] = useState([]);
┬а ┬а const [loadingLogs, setLoadingLogs] = useState(true); 
┬а ┬а const [errorLogs, setErrorLogs] = useState(''); 

┬а ┬а // Estados para el an├Аlisis de volumen
┬а ┬а const [aiAnalysisText, setAiAnalysisText] = useState("Cargando an├Аlisis de rendimiento de IA...");
┬а ┬а 
┬а ┬а // ­ЪЏЉ Almacenamos los datos crudos de la API
┬а ┬а const [rawVolumeData, setRawVolumeData] = useState([]); 
┬а ┬а const [loadingAnalysis, setLoadingAnalysis] = useState(true);
┬а ┬а 
┬а ┬а // ­ЪЏЉ NUEVOS ESTADOS para el control del gr├Аfico
┬а ┬а const [timeRange, setTimeRange] = useState('180'); // 180 d├Гas por defecto
┬а ┬а const [chartMetric, setChartMetric] = useState('totalVolume'); // 'totalVolume' o 'averageWeight'

┬а ┬а // Mapeo de filtros para daysBack
┬а ┬а const timeRangeMap = {
┬а ┬а ┬а ┬а '90': 90, ┬а// 3 Meses
┬а ┬а ┬а ┬а '180': 180, // 6 Meses
┬а ┬а ┬а ┬а '365': 365, // 1 A├▒o
┬а ┬а ┬а ┬а 'all': 3650 // 10 A├▒os (todo el historial)
┬а ┬а };

┬а ┬а // ­ЪЏЉ Effect para fetch del historial (el calendario usa este endpoint internamente)
┬а ┬а useEffect(() => {
┬а ┬а ┬а ┬а const fetchLogs = async () => {
┬а ┬а ┬а ┬а ┬а ┬а try {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingLogs(true);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const response = await apiClient.get('/workout/logs');
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLogs(response.data);
┬а ┬а ┬а ┬а ┬а ┬а } catch (err) {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а console.error('Error al cargar los logs de entrenamiento:', err);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setErrorLogs('Error al cargar el historial. Aseg├║rate de estar conectado.');
┬а ┬а ┬а ┬а ┬а ┬а } finally {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingLogs(false);
┬а ┬а ┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а };

┬а ┬а ┬а ┬а fetchLogs();
┬а ┬а }, []);

┬а ┬а // ­ЪЏЉ Effect para fetch de datos de progreso y an├Аlisis de IA
┬а ┬а // Ahora depende de timeRange para solicitar datos espec├Гficos.
┬а ┬а useEffect(() => {
┬а ┬а ┬а ┬а const fetchAnalysis = async () => {
┬а ┬а ┬а ┬а ┬а ┬а try {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingAnalysis(true);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а // ­ЪЏЉ Construye la URL con daysBack
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const days = timeRangeMap[timeRange];
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const url = `/workout/progress/volume?daysBack=${days}`;
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const response = await apiClient.get(url);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const { volumeData, aiAnalysis } = response.data; 

┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setAiAnalysisText(aiAnalysis); 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setRawVolumeData(volumeData); // Guarda los datos crudos

┬а ┬а ┬а ┬а ┬а ┬а } catch (err) {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а console.error('Error al cargar el an├Аlisis de volumen:', err);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setAiAnalysisText('Error al cargar el an├Аlisis de la IA. Int├Еntalo de nuevo m├Аs tarde.');
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setRawVolumeData([]);
┬а ┬а ┬а ┬а ┬а ┬а } finally {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingAnalysis(false);
┬а ┬а ┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а };

┬а ┬а ┬а ┬а fetchAnalysis();
┬а ┬а }, [timeRange]); // ­ЪЏЉ Se ejecuta cada vez que el rango de tiempo cambia

┬а ┬а // ­ЪЏЉ C├Аlculos basados en los datos crudos y la m├Еtrica seleccionada (useMemo)
┬а ┬а const { chartData, exerciseNames, chartTitle, yAxisLabel } = useMemo(() => {
┬а ┬а ┬а ┬а const { chartData, exerciseNames } = transformChartData(rawVolumeData, chartMetric);
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а let title = '';
┬а ┬а ┬а ┬а let yLabel = '';

┬а ┬а ┬а ┬а if (chartMetric === 'totalVolume') {
┬а ┬а ┬а ┬а ┬а ┬а title = '­ЪЊѕ Progresi├│n de Volumen Total';
┬а ┬а ┬а ┬а ┬а ┬а yLabel = 'Volumen Total (kg)';
┬а ┬а ┬а ┬а } else {
┬а ┬а ┬а ┬а ┬а ┬а title = '­ЪЈІ№ИЈ Progresi├│n de Peso Promedio';
┬а ┬а ┬а ┬а ┬а ┬а yLabel = 'Peso Promedio (kg)';
┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а return { chartData, exerciseNames, chartTitle: title, yAxisLabel: yLabel };
┬а ┬а }, [rawVolumeData, chartMetric]);

┬а ┬а const handleLogout = () => {
┬а ┬а ┬а ┬а auth.logout();
┬а ┬а ┬а ┬а navigate('/login');
┬а ┬а };


┬а ┬а return (
┬а ┬а ┬а ┬а <div style={{ 
┬а ┬а ┬а ┬а ┬а ┬а textAlign: 'center', 
┬а ┬а ┬а ┬а ┬а ┬а padding: '20px', 
┬а ┬а ┬а ┬а ┬а ┬а fontFamily: 'Inter, sans-serif',
┬а ┬а ┬а ┬а ┬а ┬а maxWidth: '1000px',
┬а ┬а ┬а ┬а ┬а ┬а margin: '0 auto'
┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а <h1 style={{ color: '#007AFF', marginBottom: '20px' }}>Dashboard de Progresi├│n</h1>

┬а ┬а ┬а ┬а ┬а ┬а {/* INTEGRACI├ЊN DEL CALENDARIO */}
┬а ┬а ┬а ┬а ┬а ┬а <div style={{ marginBottom: '40px', padding: '20px', border: '1px solid #ddd', borderRadius: '10px', backgroundColor: '#000000ff' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h2 style={{ fontSize: '1.5em' }}>­ЪЊЁ Mi Consistencia</h2>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <TrainingCalendar />
┬а ┬а ┬а ┬а ┬а ┬а </div>

┬а ┬а ┬а ┬а ┬а ┬а {/* PANEL DE AN├ЂLISIS DE IA */}
┬а ┬а ┬а ┬а ┬а ┬а <div style={{ 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а marginBottom: '40px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а backgroundColor: '#2c3e50', // Fondo oscuro
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а color: '#ecf0f1', // Texto claro
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а padding: '20px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а borderRadius: '10px' 
┬а ┬а ┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h2>­ЪДа An├Аlisis de Rendimiento IA</h2>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {loadingAnalysis ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>{aiAnalysisText}</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а textAlign: 'left', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а whiteSpace: 'pre-wrap', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а lineHeight: '1.6',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а backgroundColor: '#34495e',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а padding: '15px',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а borderRadius: '8px',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а boxShadow: '0 4px 6px rgba(0,0,0,0.2)'
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {aiAnalysisText}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {/* GR├ЂFICO DE PROGRESO DIN├ЂMICO */}
┬а ┬а ┬а ┬а ┬а ┬а <div style={{ marginBottom: '40px', backgroundColor: '#030303ff', padding: '20px', borderRadius: '10px', boxShadow: '0 2px 8px rgba(0,0,0,0.1)' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h2>{chartTitle}</h2>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {/* Controles de Filtro */}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ display: 'flex', justifyContent: 'center', gap: '20px', marginBottom: '20px' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {/* Selector de M├Еtrica (Volumen vs Peso Promedio) */}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <select 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а value={chartMetric} 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а onChange={(e) => setChartMetric(e.target.value)}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а style={selectStyle}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="totalVolume">Volumen Total</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="averageWeight">Peso Promedio</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </select>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {/* Selector de Rango de Tiempo (D├Гas) */}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <select 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а value={timeRange} 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а onChange={(e) => setTimeRange(e.target.value)}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а style={selectStyle}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а >
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="90">├џltimos 3 Meses</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="180">├џltimos 6 Meses</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="365">├џltimo A├▒o</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <option value="all">Todo el Historial</option>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </select>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {/* Renderizado del Gr├Аfico */}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {loadingAnalysis ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>Cargando gr├Аfico...</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <ProgressChart 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а data={chartData} 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а exerciseNames={exerciseNames} 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а yAxisLabel={yAxisLabel} // Pasamos la etiqueta din├Аmica
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а chartMetric={chartMetric} // Pasamos la m├Еtrica
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а /> 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {/* HISTORIAL DE ENTRENAMIENTOS (Sin cambios significativos, solo estilo) */}
┬а ┬а ┬а ┬а ┬а ┬а <h2>Historial de Entrenamientos</h2>
┬а ┬а ┬а ┬а ┬а ┬а {loadingLogs && <p>Cargando historial...</p>}
┬а ┬а ┬а ┬а ┬а ┬а {errorLogs && <p style={{ color: 'red' }}>{errorLogs}</p>}
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {!loadingLogs && !errorLogs && (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а logs.length === 0 ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>No tienes entrenamientos registrados. ┬АEmpieza una rutina!</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {logs.map(log => {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const minutes = Math.floor(log.duration_seconds / 60);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const seconds = log.duration_seconds % 60;

┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а return (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div key={log.id} style={logItemStyle}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h3 style={{ marginTop: 0, borderBottom: '1px solid #eee', paddingBottom: '5px' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {log.day_name || `Rutina #${log.routine_id}`}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </h3>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p><strong>Duraci├│n:</strong> {minutes} min {seconds} seg</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p><strong>Fecha:</strong> {new Date(log.created_at).toLocaleString()}</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а );
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а })}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )
┬а ┬а ┬а ┬а ┬а ┬а )}

┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а </div>
┬а ┬а );
}

export default DashboardPage;


// Estilos para los selectores y botones
const selectStyle = {
┬а ┬а padding: '8px 12px',
┬а ┬а borderRadius: '6px',
┬а ┬а border: '1px solid #1be400ff',
┬а ┬а outline: 'none',
┬а ┬а cursor: 'pointer',
┬а ┬а backgroundColor: '#000000ff',
┬а ┬а minWidth: '150px'
};



const logItemStyle = {
┬а ┬а border: '1px solid #ccc', 
┬а ┬а borderRadius: '8px', 
┬а ┬а padding: '15px', 
┬а ┬а margin: '10px 0', 
┬а ┬а width: '100%', 
┬а ┬а maxWidth: '600px',
┬а ┬а textAlign: 'left',
┬а ┬а boxShadow: '0 2px 4px rgba(0,0,0,0.05)',
┬а ┬а backgroundColor: '#000000ff'
};