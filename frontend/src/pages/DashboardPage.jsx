import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { useNavigate } from 'react-router-dom';
import apiClient from '../api/apiClient.js';
import VolumeChart from '../components/VolumeChart.jsx'; 
// ­ЪЏЉ Importar el nuevo componente de calendario
import TrainingCalendar from '../components/TrainingCalendar.jsx'; 


// Funci├│n para transformar los datos del backend al formato de Recharts
const transformVolumeData = (data) => {
┬а ┬а const transformedData = {};
┬а ┬а const exercises = new Set();
┬а ┬а 
┬а ┬а data.forEach(item => {
┬а ┬а ┬а ┬а const { monthYear, exerciseName, totalVolume } = item;
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а if (!transformedData[monthYear]) {
┬а ┬а ┬а ┬а ┬а ┬а transformedData[monthYear] = { monthYear }; 
┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а transformedData[monthYear][exerciseName] = totalVolume; 
┬а ┬а ┬а ┬а exercises.add(exerciseName);
┬а ┬а });
┬а ┬а 
┬а ┬а return { 
┬а ┬а ┬а ┬а chartData: Object.values(transformedData).sort((a, b) => a.monthYear.localeCompare(b.monthYear)),
┬а ┬а ┬а ┬а exerciseNames: Array.from(exercises)
┬а ┬а };
};


function DashboardPage() {
┬а ┬а const auth = useAuth();
┬а ┬а const navigate = useNavigate();
┬а ┬а 
┬а ┬а // Estados existentes para historial
┬а ┬а const [logs, setLogs] = useState([]);
┬а ┬а const [loadingLogs, setLoadingLogs] = useState(true); 
┬а ┬а const [errorLogs, setErrorLogs] = useState(''); 

┬а ┬а // Estados para el an├Аlisis de volumen
┬а ┬а const [aiAnalysisText, setAiAnalysisText] = useState("Cargando an├Аlisis de rendimiento de IA...");
┬а ┬а const [chartData, setChartData] = useState([]);
┬а ┬а const [exerciseNames, setExerciseNames] = useState([]);
┬а ┬а const [loadingAnalysis, setLoadingAnalysis] = useState(true);


┬а ┬а // Effect para fetch del historial (el calendario usa este endpoint internamente)
┬а ┬а useEffect(() => {
┬а ┬а ┬а ┬а const fetchLogs = async () => {
┬а ┬а ┬а ┬а ┬а ┬а try {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingLogs(true);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const response = await apiClient.get('/workout/logs');
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLogs(response.data);
┬а ┬а ┬а ┬а ┬а ┬а } catch (err) {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а console.error('Error al cargar los logs de entrenamiento:', err);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setErrorLogs('Error al cargar el historial. Aseg├║rate de estar conectado.');
┬а ┬а ┬а ┬а ┬а ┬а } finally {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingLogs(false);
┬а ┬а ┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а };

┬а ┬а ┬а ┬а fetchLogs();
┬а ┬а }, []);

┬а ┬а // Effect para fetch de datos de progreso y an├Аlisis de IA
┬а ┬а useEffect(() => {
┬а ┬а ┬а ┬а const fetchAnalysis = async () => {
┬а ┬а ┬а ┬а ┬а ┬а try {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingAnalysis(true);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const response = await apiClient.get('/workout/progress/volume');
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const { volumeData, aiAnalysis } = response.data; 

┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setAiAnalysisText(aiAnalysis); 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а if (volumeData && volumeData.length > 0) {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const { chartData: transformedChartData, exerciseNames: uniqueExercises } = transformVolumeData(volumeData);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setChartData(transformedChartData);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setExerciseNames(uniqueExercises);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а } else {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setChartData([]);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setExerciseNames([]);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а }

┬а ┬а ┬а ┬а ┬а ┬а } catch (err) {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а console.error('Error al cargar el an├Аlisis de volumen:', err);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setAiAnalysisText('Error al cargar el an├Аlisis de la IA. Int├Еntalo de nuevo m├Аs tarde.');
┬а ┬а ┬а ┬а ┬а ┬а } finally {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а setLoadingAnalysis(false);
┬а ┬а ┬а ┬а ┬а ┬а }
┬а ┬а ┬а ┬а };

┬а ┬а ┬а ┬а fetchAnalysis();
┬а ┬а }, []); 

┬а ┬а const handleLogout = () => {
┬а ┬а ┬а ┬а auth.logout();
┬а ┬а ┬а ┬а navigate('/login');
┬а ┬а };


┬а ┬а return (
┬а ┬а ┬а ┬а <div style={{ textAlign: 'center', padding: '20px' }}>
┬а ┬а ┬а ┬а ┬а ┬а <h1>Dashboard</h1>

            {/* ­ЪЏЉ INTEGRACI├ЊN DEL CALENDARIO */}
            <div style={{ marginBottom: '40px', padding: '20px', border: '1px solid #ccc', borderRadius: '10px' }}>
                <TrainingCalendar />
            </div>

┬а ┬а ┬а ┬а ┬а ┬а {/* PANEL DE AN├ЂLISIS DE IA */}
┬а ┬а ┬а ┬а ┬а ┬а <div style={{ 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а marginBottom: '40px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а backgroundColor: '#000000ff', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а padding: '20px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а borderRadius: '10px' 
┬а ┬а ┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h2>­ЪДа An├Аlisis de Rendimiento IA</h2>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {loadingAnalysis ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>{aiAnalysisText}</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а textAlign: 'left', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а whiteSpace: 'pre-wrap', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а lineHeight: '1.6',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а backgroundColor: '#000000ff',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а padding: '15px',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а borderRadius: '8px',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {aiAnalysisText}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {/* GR├ЂFICO DE VOLUMEN */}
┬а ┬а ┬а ┬а ┬а ┬а <div style={{ marginBottom: '40px' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h2>­ЪЊѕ Progresi├│n de Volumen (├џltimos 6 Meses)</h2>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {loadingAnalysis ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>Cargando gr├Аfico...</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <VolumeChart data={chartData} exerciseNames={exerciseNames} /> 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {/* HISTORIAL DE ENTRENAMIENTOS */}
┬а ┬а ┬а ┬а ┬а ┬а <h2>Historial de Entrenamientos</h2>
┬а ┬а ┬а ┬а ┬а ┬а {loadingLogs && <p>Cargando historial...</p>}
┬а ┬а ┬а ┬а ┬а ┬а {errorLogs && <p style={{ color: 'red' }}>{errorLogs}</p>}
┬а ┬а ┬а ┬а ┬а ┬а 
┬а ┬а ┬а ┬а ┬а ┬а {!loadingLogs && !errorLogs && (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а logs.length === 0 ? (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p>No tienes entrenamientos registrados. ┬АEmpieza una rutina!</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ) : (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {logs.map(log => {
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const minutes = Math.floor(log.duration_seconds / 60);
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а const seconds = log.duration_seconds % 60;

┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а return (
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <div key={log.id} style={{ 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а border: '1px solid #ccc', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а borderRadius: '8px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а padding: '15px', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а margin: '10px 0', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а width: '80%', 
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а maxWidth: '600px',
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а textAlign: 'left'
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <h3 style={{ marginTop: 0, borderBottom: '1px solid #eee', paddingBottom: '5px' }}>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а {log.day_name || `Rutina #${log.routine_id}`}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </h3>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p><strong>Duraci├│n:</strong> {minutes} min {seconds} seg</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а <p><strong>Fecha:</strong> {new Date(log.created_at).toLocaleString()}</p>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а );
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а })}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а )
┬а ┬а ┬а ┬а ┬а ┬а )}
┬а ┬а ┬а ┬а </div>
┬а ┬а );
}

export default DashboardPage;